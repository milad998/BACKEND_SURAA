// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // أو mysql
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String
  avatar        String?
  status        UserStatus @default(ONLINE)
  lastSeen      DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // العلاقات
  sentMessages     Message[]  @relation("MessageSender")
  receivedMessages Message[]  @relation("MessageReceiver")
  chats            ChatUser[]
  
  @@map("users")
}

model Chat {
  id          String   @id @default(cuid())
  name        String?
  type        ChatType @default(PRIVATE)
  background  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // العلاقات
  users    ChatUser[]
  messages Message[]
  
  @@map("chats")
}

model ChatUser {
  id        String   @id @default(cuid())
  userId    String
  chatId    String
  joinedAt  DateTime @default(now())
  
  // العلاقات
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  
  @@unique([userId, chatId])
  @@map("chat_users")
}

model Message {
  id           String      @id @default(cuid())
  content      String
  type         MessageType @default(TEXT)
  encrypted    Boolean     @default(true)
  isRead       Boolean     @default(false)
  senderId     String
  receiverId   String?
  chatId       String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  // العلاقات
  sender   User   @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User?  @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  chat     Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
  
  @@map("messages")
}

enum UserStatus {
  ONLINE
  OFFLINE
  AWAY
}

enum ChatType {
  PRIVATE
  GROUP
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  VOICE
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
